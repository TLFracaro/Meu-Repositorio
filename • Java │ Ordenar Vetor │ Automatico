/*=========================================================*/
/* TADS - Tecnico em Analise e Desenvolvimento de Sistemas */
/*         Código feito por: Túlio Farias Fracaro          */ 
/*           APII - Algoritimo de programação II           */
/*=========================================================*/

import javax.swing.JOptionPane;
public class HelloWorls {
	public static void main(String[] args) {
		int linha = Integer.parseInt(JOptionPane.showInputDialog("• Digite o tamanho do vetor: "));
		int vetor [] = new int [linha];
		for (int i = 0; i < vetor.length; i++) {
			vetor[i] = (int) (Math.random()*20);
		}
		System.out.print("• Vetor não ordenado: ");
		for (int i = 0; i < vetor.length; i++) {
			System.out.print(" [" + vetor [i] + "] ");
		}
		OrdenarVetor(vetor);
		System.out.println(" ");
		System.out.print("• Vetor ordenado em ordem crescente: ");
		for(int i = 0; i < vetor.length; i++) {
			System.out.print(" [" + vetor [i] + "] ");
		}
		int NumEncontrar = Integer.parseInt(JOptionPane.showInputDialog("Qual Número Você quer encontrar no vetor: "));
		int valor = EncontrarNoVetor(vetor, NumEncontrar);
		if(valor==-1) {
			System.out.println(" ");
			System.out.println("• Numero não encontrado no vetor!");
		}else {
			System.out.println(" ");
			System.out.println("• O numero foi encontrado no indice: " + valor);
		}
		OrdenarPaiImpar(vetor);
		System.out.print("• Vetor ordenado par e impares: ");
		for (int i = 0; i < vetor.length; i++) {
			System.out.print(" [" + vetor [i] + "] ");
		}
		System.out.println("");
		OrdenarCrescenteParImpar(vetor);
		System.out.print("• Vetor ordenado em ordem crescente par e impares: ");
		for (int i = 0; i < vetor.length; i++) {
			System.out.print(" [" + vetor [i] + "] ");
		}
	}
	private static void OrdenarCrescenteParImpar(int[] vetor) {
		int aux = 0;
		for(int i = 0; i < vetor.length -1; i++) {
			for(int j = 0; j < vetor.length - i - 1; j++) {
				if(vetor[j] % 2 == 1) {
					aux = vetor[j];
					vetor[j] = vetor[j+1];
					vetor[j+1] = aux;
					if (vetor[j] > vetor[j+1]) {
						aux = vetor[j];
						vetor[j] = vetor[j+1];
						vetor[j+1] = aux;
					}
				}
			}
		}

	}
	private static void OrdenarPaiImpar(int[] vetor) {
		int aux = 0;
		for(int i = 0; i < vetor.length -1; i++) {
			for(int j = 0; j < vetor.length - i - 1; j++) {
				if(vetor[j] % 2 == 1) {
					aux = vetor[j];
					vetor[j] = vetor[j+1];
					vetor[j+1] = aux;
				}
			}
		}

	}
	private static int EncontrarNoVetor(int[] vetor, int NumEncontrar) {
		/*Busca Binaria*/
		int i, m, f;
		i = 0;
		f = vetor.length-1;
		while (i <= f){
			m = (i + f) / 2;
			if (vetor[m] == NumEncontrar) {
				return m;
			}
			if (NumEncontrar < vetor[m]) {
				f = m - 1;
			}
			else {
				i = m + 1;
			}
		}
		return -1;
	}
	public static void OrdenarVetor (int [] vetor) {
		/*Ordenar Vetor*/
		int aux = 0;
		for (int i = 0; i < vetor.length - 1; i++) {
			for (int j = 0; j < vetor.length - i - 1; j++) {
				if (vetor[j] > vetor[j+1]) {
					aux = vetor[j];
					vetor[j] = vetor[j+1];
					vetor[j+1] = aux;
				}
			}
		}
	}
}
